matrix<int> matrixScale(matrix<int> a, int scale) {

    /* This is zero initialized */
    matrix<int>[rows(a),cols(a)] res;

    /* Outer loop for each row (up-down) */
    for(int i = 0; i < rows(a); i++) {
        /* Inner loop for each column,
         * The first values iterated over are the first ones in the first row
         * This make the cache use more efficient.
         */
        for(int j = 0; j < cols(a); j++) {
            res[i, j] = a[i, j] * scale;
        }
    }

    return res;
}

bool testMatrixScale() {
    bool isSame = true;

    matrix<int> a = [1, 2, 3;
                     4, 5, 6];

    matrix<int> expected = [0, 0, 0;
                            0, 0, 0];

    matrix<int> actual = matrixScale(a, 0);

    for(int i = 0; i < rows(a); i++) {
        for(int j = 0; j < cols(a); j++) {
            if(expected[i, j] != actual[i, j]) {
                isSame = false;
            }
        }
    }

    return isSame;
}

print(testMatrixScale());